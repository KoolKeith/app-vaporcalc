#!perl

use Defaults::Modern
  -with_types => [ 'App::vaporcalc::Types' ];

use App::vaporcalc::FormatString;
use App::vaporcalc::RecipeResultSet;

my $tmpl = <<'EOT';
 --> %target_quantity ml  (%target_pg%/%target_vg% PG/VG) 
  base nic: %base_nic_per_ml mg/ml -- %base_nic_type%
  target nic: %target_nic_per_ml mg/ml
  flavor percentage: %flavor_percentage -- %flavor_type
  notes: %notes
 =>
  vg: [%vg ml]  pg: [%pg ml]  nic base: [%nic ml]  flavor: [%flavor ml]
  total: %total ml
EOT

my $Opts = +{
  help => sub {
    print
      "vcalc-simple -- App::vaporcalc\n",
      "Usage:\n",
      "   --read=FILE   Read a saved JSON RecipeResultSet\n",
      "   --write=FILE  Create a new RecipeResultSet\n",
    ; exit 0
  },
};
use Getopt::Long;
GetOptions( $Opts,
  'help',
  'read=s',
  'write=s',
);
if (exists $Opts->{read} && exists $Opts->{write}) {
  die "Did you mean to type 'cp' ?\n"
}

fun getopts { state $argv = hash(%$Opts) }

fun one_line { my $in = readline STDIN; chomp $in; $in }

fun format_resultset (RecipeResultSet $rset) {
  my $recipe = $rset->recipe;
  my $result = $rset->result;

  my $formatted = format_str( $tmpl =>
    notes => sub {
      $recipe->notes->has_any ?
        "\n" . $recipe->notes->map(sub { ' - '.$_ })->join("\n") 
        : 'none'
    },
    (map {; $_ => $recipe->$_ } qw/
      target_quantity target_nic_per_ml
      base_nic_per_ml base_nic_type
      target_pg target_vg
      flavor_percentage flavor_type
    /),
    (map {; $_ => $result->$_ } qw/
      vg pg nic flavor total
    /),
  ); 

  $formatted
}

fun get_params {
  STDOUT->autoflush(1);

  my @params;

  print "Target quantity (ml): ";
  push @params,
    target_quantity => one_line;

  print "Base nic (mg/ml): ";
  push @params,
    base_nic_per_ml => one_line;

  print "Base nic type (PG/VG): ";
  push @params,
    base_nic_type => uc(one_line);

  print "Target nic (mg/ml): ";
  push @params,
    target_nic_per_ml => one_line;

  print "Target PG %: ";
  push @params,
    target_pg => one_line;

  print "Target VG %: ";
  push @params,
    target_vg => one_line;

  print "Flavor %: ";
  push @params,
    flavor_percentage => one_line;

  print "Flavor type (PG/VG): ";
  push @params,
    flavor_type => uc(one_line);

  my @notes;
  print "You can add notes as-needed, blank line ends:\n";
  my $in = readline STDIN; chomp $in;
  while ($in) {
    push @notes, $in;
    $in = readline STDIN; chomp $in;
  }
  push @params, notes => \@notes;

  +{ @params }
}


if (my $fname = getopts->get('read')) {
  my $rset = App::vaporcalc::RecipeResultSet->load($fname);
  print format_resultset($rset);
  exit 0
}

if (my $fname = getopts->get('write')) {
  if ( -e $fname ) {
    say "Path '$fname' already exists! Enter to continue, ctrl+C to quit:";
    readline STDIN;
  }

  my $rset = App::vaporcalc::RecipeResultSet->new(
    recipe => get_params,
  ); 

  print format_resultset($rset);

  say "\nWrite to '$fname'? Enter to continue, ctrl+C to quit:";
  readline STDIN;
  $rset->save($fname);

  say "Success!";
  exit 0
}

say "No file to --write specified.\nPress enter to continue anyway.";
my $rset = App::vaporcalc::RecipeResultSet->new(recipe => get_params);
print format_resultset($rset);

exit 0
